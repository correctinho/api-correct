// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model CorrectAdmin {
  uuid     String  @id @default(uuid())
  name     String
  userName String  @unique
  email    String  @unique
  password String
  isAdmin  Boolean @default(true)

  @@map("correct_admin")
}

enum Permissions {
  all
  sales
  finances
  marketing
  benefits
  transports
  allPartners
  allEmployers
}

enum Status {
  pending
  active
  inactive
  pending_password
}

model BusinessUser {
  uuid               String        @id @default(uuid())
  business_info_uuid String
  is_admin           Boolean       @default(false)
  document           String?       @unique
  name               String?
  email              String?       @unique
  user_name          String?
  password           String
  function           String?
  permissions        Permissions[] @default([all])
  status             Status        @default(pending)
  created_at         DateTime?     @default(now())
  updated_at         DateTime?     @updatedAt

  BusinessInfo         BusinessInfo           @relation(fields: [business_info_uuid], references: [uuid])
  BusinessNotification BusinessNotification[]

  @@map("business_users")
}

model BranchInfo {
  uuid          String         @id @default(uuid())
  name          String
  benefit_uuid  String
  marketing_tax Int
  admin_tax     Int
  BusinessInfo  BusinessInfo[]

  Benefit Benefit @relation(fields: [benefit_uuid], references: [uuid])

  @@map("branch")
}

model BusinessInfo {
  uuid                String              @id @default(uuid())
  address_uuid        String
  fantasy_name        String
  corporate_reason    String?
  document            String              @unique
  branch_uuid         String
  classification      String
  colaborators_number Int
  status              Status              @default(pending_password)
  phone_1             String
  phone_2             String?
  email               String              @unique
  business_type       BusinessTypeOptions

  Address        Address?         @relation(fields: [address_uuid], references: [uuid])
  BranchInfo     BranchInfo       @relation(fields: [branch_uuid], references: [uuid])
  BusinessUser   BusinessUser[]
  UserInfo       UserInfo[]
  Transactions   Transactions[]
  BusinessConfig BusinessConfig[]
  ContractInfo   ContractInfo[]

  @@map("business_data")
}

enum BusinessTypeOptions {
  empregador
  comercio
  autonomo_comercio
  empregador_comercio
}

model Address {
  uuid         String         @id @default(uuid())
  line1        String
  line2        String
  line3        String?
  postal_code  String
  neighborhood String
  city         String
  state        String
  country      String
  BusinessInfo BusinessInfo[]
  UserInfo     UserInfo[]

  @@map("addresses")
}

model UserInfo {
  uuid                  String     @id @default(uuid())
  business_info_uuid    String?
  address_uuid          String?
  document              String     @unique
  document2             String?    @unique
  document3             String?    @unique
  full_name             String?
  display_name          String?
  internal_company_code String?
  gender                String?
  email                 String
  date_of_birth         DateTime
  phone                 String?
  salary                String?
  company_owner         Boolean    @default(false)
  status                Status     @default(pending)
  function              String?
  recommendation_code   String?
  is_authenticated      Boolean    @default(false)
  marital_status        String?
  dependents_quantity   Int        @default(0)
  UserAuth              UserAuth[]

  BusinessInfo     BusinessInfo?      @relation(fields: [business_info_uuid], references: [uuid])
  Address          Address?           @relation(fields: [address_uuid], references: [uuid])
  UserWallet       UserWallet[]
  Transactions     Transactions[]
  UserNotification UserNotification[]

  @@map("user_info")
}

model UserAuth {
  uuid           String  @id @default(uuid())
  user_info_uuid String?
  document       String  @unique
  password       String

  created_at DateTime  @default(now())
  updated_at DateTime? @updatedAt

  UserInfo UserInfo? @relation(fields: [user_info_uuid], references: [uuid])

  @@map("users_auth")
}

enum BenefitType {
  pos_pago
  pre_pago
}

model Benefit {
  uuid         String       @id @default(uuid())
  benefit_name String
  benefit_type BenefitType
  created_at   DateTime     @default(now())
  updated_at   DateTime?    @updatedAt
  UserWallet   UserWallet[]
  BranchInfo   BranchInfo[]

  @@map("benefits")
}

model UserWallet {
  uuid           String    @id @default(uuid())
  user_info_uuid String
  benefit_uuid   String
  balance        Int
  created_at     DateTime  @default(now())
  updated_at     DateTime? @updatedAt

  UserInfo     UserInfo       @relation(fields: [user_info_uuid], references: [uuid])
  Benefit      Benefit        @relation(fields: [benefit_uuid], references: [uuid])
  Transactions Transactions[]

  @@map("users_wallet")
}

model ContractInfo {
  uuid               String @id @default(uuid())
  name               String
  version            String
  assigned_at        String
  business_info_uuid String

  BusinessInfo BusinessInfo @relation(fields: [business_info_uuid], references: [uuid])

  @@map("contract_info")
}

enum TransactionStatus {
  pending
  sucess
  fail
}

model Transactions {
  uuid               String            @id @default(uuid())
  payer_wallet_uuid  String
  favored_uuid       String
  business_info_uuid String
  amount             Int
  fee_amount         Int
  cashback           Int
  status             TransactionStatus
  created_at         DateTime?         @default(now())
  updated_at         DateTime?         @updatedAt

  UserWallet   UserWallet   @relation(fields: [payer_wallet_uuid], references: [uuid])
  UserInfo     UserInfo     @relation(fields: [favored_uuid], references: [uuid])
  BusinessInfo BusinessInfo @relation(fields: [business_info_uuid], references: [uuid])

  @@map("transactions")
}

model BusinessRecommendation {
  uuid          String @id @default(uuid())
  business_name String
  owner_name    String
  city          String
  state         String
  neighborhood  String
  phone         String
  social_media  String

  @@map("business_recommendations")
}

model BusinessConfig {
  uuid                     String   @id @default(uuid())
  business_info_uuid       String
  admin_tax                Int
  marketing_tax            Int
  block_list               String[] @default([])
  cycle_start_date         String?
  cycle_end_date           String?
  cycle_paper_payment_date String?

  BusinessInfo BusinessInfo @relation(fields: [business_info_uuid], references: [uuid])

  @@map("business_config")
}

model UserNotification {
  uuid           String  @id @default(uuid())
  user_info_uuid String
  title          String
  description    String
  read           Boolean
  created_at     String

  UserInfo UserInfo @relation(fields: [user_info_uuid], references: [uuid])

  @@map("user_notification")
}

model BusinessNotification {
  uuid               String  @id @default(uuid())
  business_user_uuid String
  title              String
  description        String
  read               Boolean
  created_at         String

  BusinessUser BusinessUser @relation(fields: [business_user_uuid], references: [uuid])

  @@map("business_notifications")
}

model Products {
  uuid               String @id @default(uuid())
  business_info_uuid String
  name               String
  original_value     Int
  value              Int
  description        String
  image              String
  stock              Int
  weight             String
  volume             String

  @@map("products")
}
